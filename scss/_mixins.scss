/*********************
CLEARFIXIN'
*********************/

// Contain floats: nicolasgallagher.com/micro-clearfix-hack/
.clearfix {
  zoom: 1;
	&::before, &::after { content: ""; display: table; }
	&::after { clear: both; }
}

/*********************
TOOLS
*********************/

// BORDER-BOX ALL THE THINGS! (http://paulirish.com/2012/box-sizing-border-box-ftw/)
* {
	-webkit-box-sizing: border-box;
	-moz-box-sizing:    border-box;
	box-sizing:         border-box;
}

// http://www.zeldman.com/2012/03/01/replacing-the-9999px-hack-new-image-replacement/
.visuallyhidden { 
	position : absolute;
	clip : rect(0 0 0 0); 
	overflow : hidden;
	margin: -1px;
	padding : 0;
	height : 1px;      
	width : 1px;
	border : 0; 
}

/*
use the best ampersand
http://simplebits.com/notebook/2008/08/14/ampersands-2/
*/
span.amp {
  font-family: Baskerville,'Goudy Old Style',Palatino,'Book Antiqua',serif !important;
  font-style: italic;
}

// text alignment
.text-left   { text-align: left; }
.text-center { text-align: center; }
.text-right  { text-align: right; }


// marquees
::-webkit-selection { 
background : $link-color; 
color : #FFF; 
text-shadow : none; }

::-moz-selection { 
background : $link-color;
color : #FFF; 
text-shadow : none; }

::selection { 
background : $link-color;
color : #FFF; 
text-shadow : none; }

img, object, embed {max-width:100%;}


/* ======================================= MIXIN DEFINITIONS ============================================ */

@function parseInt($n) { /* 2 */
  @return $n / ($n * 0 + 1);
}

@mixin rem($property, $values) {
  $px : (); /* 3 */
  $rem: (); /* 3 */
  
  @each $value in $values { /* 4 */
   
    @if $value == 0 or $value == auto { /* 5 */
      $px : append($px , $value);
      $rem: append($rem, $value);
    }
    
    @else { 
      $unit: unit($value);    /* 6 */
      $val: parseInt($value); /* 6 */
      
      @if $unit == "px" {  /* 7 */
        $px : append($px,  $value);
        $rem: append($rem, ($val / $basefontsize + rem));
      }
      
      @if $unit == "rem" { /* 7 */
        $px : append($px,  ($val * $basefontsize + px));
        $rem: append($rem, $value);
      }
    }
  }
  
  @if $px == $rem {     /* 8 */
    #{$property}: $px;  /* 9 */
  } @else {
    #{$property}: $px;  /* 9 */
    #{$property}: $rem; /* 9 */
  }
}

/*********************
MEDIA QUERY MIXIN
*********************/

$no-mq-support: false !default;
$serve-to-nomq-max-width: 60em;

@mixin mq($query) {
  @if $no-mq-support{
    @if $query < $serve-to-nomq-max-width {
      @content;
    }
  } @else {
    @media only screen and ( 'min-width:' + $query ) {
      @content;
    }
  }
}

/*********************
TRANISTION
*********************/

/*
I totally rewrote this to be cleaner and easier to use.
You'll need to be using Sass 3.2+ for these to work.
Thanks to @anthonyshort for the inspiration on these.
USAGE: @include transition(all 0.2s ease-in-out);
*/

@mixin transition($transition...) {
	// defining prefixes so we can use them in mixins below
	$prefixes:      ("-webkit", "-ms", "-o");
  @each $prefix in $prefixes {
    #{$prefix}-transition: $transition;
  }

  transition: $transition;
}

/*********************
CSS3 GRADIENTS
Be careful with these since they can
really slow down your CSS. Don't overdue it.
*********************/

/* @include css-gradient(#dfdfdf,#f8f8f8); */
@mixin css-gradient($from: #dfdfdf, $to: #f8f8f8) {
	background-color: $to;
	background-image: -webkit-gradient(linear, left top, left bottom, from($from), to($to));
	background-image: -webkit-linear-gradient(top, $from, $to);
	background-image: -moz-linear-gradient(top, $from, $to);
	background-image: -o-linear-gradient(top, $from, $to);
	background-image: linear-gradient(to bottom, $from, $to);
	filter: progid:DXImageTransform.Microsoft.gradient( startColorstr='#{ie-hex-str($from)}', endColorstr='#{ie-hex-str($to)}',GradientType=0 );
}


@mixin radius($topleft, $topright: $topleft, $bottomright: $topleft, $bottomleft: $topleft) {

    -moz-border-radius: 			$topleft $topright $bottomright $bottomleft;
    -webkit-border-radius:          $topleft $topright $bottomright $bottomleft;
    border-radius:                  $topleft $topright $bottomright $bottomleft;

}

/*********************
BOX SIZING
*********************/

/* @include box-sizing(border-box); */
/* NOTE: value of "padding-box" is only supported in Gecko. So
probably best not to use it. I mean, were you going to anyway? */
@mixin box-sizing($type: border-box) {
	-webkit-box-sizing: $type;
	-moz-box-sizing:    $type;
	-ms-box-sizing:     $type;
	box-sizing:         $type;
}

/*********************
BOX SHADOWS
*********************/

@mixin shadow {
	-webkit-box-shadow:0 15px 10px -10px rgba(0, 0, 0, 0.3), 0 1px 4px rgba(0, 0, 0, 0.2), 0 0 40px rgba(0, 0, 0, 0.1) inset;
	-moz-box-shadow:0 15px 10px -10px rgba(0, 0, 0, 0.3), 0 1px 4px rgba(0, 0, 0, 0.2), 0 0 40px rgba(0, 0, 0, 0.1) inset;
	box-shadow:0 15px 10px -10px rgba(0, 0, 0, 0.3), 0 1px 4px rgba(0, 0, 0, 0.2), 0 0 40px rgba(0, 0, 0, 0.1) inset;
}


/*********************
BUTTONS
*********************/

%button {
	font-family: $sans-serif;
	border: 1px solid darken($link-color, 13%);
	border-top-color: darken($link-color, 7%);
	border-left-color: darken($link-color, 7%);
	padding: 4px 12px;
	color: $white;
	display: inline-block;
	font-size: 1em;
	font-weight: 400;
	text-decoration: none;
	text-shadow: 0 1px rgba(0,0,0, .75);
	cursor: pointer;
	line-height: 21px;
	border-radius: 4px;
	@include css-gradient($link-color, darken($link-color, 5%));
	box-shadow: inset 0 0 3px lighten($link-color, 16%);

	&.large {
	  font-size:1.142857143em;
	  padding:8px 18px;
	}

	&:hover, &:focus {
		color: $white;
		text-decoration: none;
	  	border: 1px solid darken($link-color, 13%);
	  	border-top-color: darken($link-color, 20%);
	 	border-left-color: darken($link-color, 20%);
		@include css-gradient(darken($link-color, 2%), darken($link-color, 9%));
	}

	&:active {
		@include css-gradient(darken($link-color, 5%), $link-color);
	}
}


/*********************
DELAYED ANIMATION MIXIN
*********************/

@mixin animation($name, $duration:1s, $delay:0s, $iteration:1) {
  $prefixes:      ("-webkit-", "-moz-", "-o-", "");
  @each $prefix in $prefixes {
    #{$prefix}animation-name:$name;
    #{$prefix}animation-duration:$duration;
    #{$prefix}animation-timing-function:ease-out;
    #{$prefix}animation-iteration-count:$iteration;
    #{$prefix}animation-direction:normal;
    #{$prefix}animation-delay:$delay;
    #{$prefix}animation-play-state:running;
    #{$prefix}animation-fill-mode:forwards;
  }
  -webkit-backface-visibility: hidden;
  transform: translate3d(0, 0, 0);
}

@mixin animation-delay($delay:0s) {
$prefixes:      ("-webkit-", "-moz-", "-o-", "");
  @each $prefix in $prefixes {
    #{$prefix}animation-delay:$delay;
  }
}

/* fade in right */

@-webkit-keyframes fadeInRight {
  0% {
    opacity: 0;
    -webkit-transform: translateX(20px);
    transform: translateX(20px);
  }

  100% {
    opacity: 1;
    -webkit-transform: translateX(0);
    transform: translateX(0);
  }
}

@-moz-keyframes fadeInRight {
  0% {
    opacity: 0;
    -moz-transform: translateX(20px);
    transform: translateX(20px);
  }

  100% {
    opacity: 1;
    -moz-transform: translateX(0);
    transform: translateX(0);
  }
}
@-o-keyframes fadeInRight {
  0% {
    opacity: 0;
    -o-transform: translateX(20px);
    transform: translateX(20px);
  }

  100% {
    opacity: 1;
    -o-transform: translateX(0);
    transform: translateX(0);
  }
}

@keyframes fadeInRight {
  0% {
    opacity: 0;
    -webkit-transform: translateX(20px);
    -ms-transform: translateX(20px);
    transform: translateX(20px);
  }

  100% {
    opacity: 1;
    -webkit-transform: translateX(0);
    -ms-transform: translateX(0);
    transform: translateX(0);
  }
}

/* scale-in */

@-webkit-keyframes scaleIn{
  0%{opacity:0;-webkit-transform:scale(0.97)}
  100%{opacity:1;-webkit-transform:scale(1)}
}
@-moz-keyframes scaleIn{
  0%{opacity:0;-moz-transform:scale(0.97)}
  100%{opacity:1;-moz-transform:scale(1)}
}
@-o-keyframes scaleIn{
  0%{opacity:0;-o-transform:scale(0.97)}
  100%{opacity:1;-o-transform:scale(1)}
}
@keyframes scaleIn{
  0%{opacity:0;transform:scale(0.97)}
  100%{opacity:1;transform:scale(1)}
}

/* bounce */

@-webkit-keyframes bounce {
  0%, 20%, 50%, 80%, 100% {
    -webkit-transform: translateY(0);
    transform: translateY(0);
  }

  40% {
    -webkit-transform: translateY(-30px);
    transform: translateY(-30px);
  }

  60% {
    -webkit-transform: translateY(-15px);
    transform: translateY(-15px);
  }
}

@keyframes bounce {
  0%, 20%, 50%, 80%, 100% {
    -webkit-transform: translateY(0);
    -ms-transform: translateY(0);
    transform: translateY(0);
  }

  40% {
    -webkit-transform: translateY(-30px);
    -ms-transform: translateY(-30px);
    transform: translateY(-30px);
  }

  60% {
    -webkit-transform: translateY(-15px);
    -ms-transform: translateY(-15px);
    transform: translateY(-15px);
  }
}